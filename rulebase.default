# vim:set syntax=tcl:
# These are the built-in rules
#
# They can be replaced if necessary

use getopt glob

# ==================================================================
# Default variable settings and rules
# ==================================================================

# If settings are loaded via Load, these should all be ignored
# Thus we use define?
define? CCACHE ""
define? CC cc
define? CC_FOR_BUILD cc
define? CXX c++
define? AR ar
define? RANLIB ranlib
define? STRIP strip
define? ARFLAGS cr
define? SH_LINKFLAGS ""
define? CFLAGS ""
define? CXXFLAGS ""
define? LDFLAGS ""
define? HOSTCFLAGS ""

define? SH_CFLAGS ""
define? SH_LDFLAGS ""
define? SH_SOEXT .so
define? SHOBJ_CFLAGS ""
define? SHOBJ_LDFLAGS ""


define? LOCAL_LIBS ""
define? DESTDIR ""
define? OBJCFLAGS ""
define? INCPATHS ""

# These are set by the project via CFlags, ObjectCFlags, LinkFlags, etc.
define C_FLAGS ""
define CXX_FLAGS ""
define LD_FLAGS ""

# XXX Should be $TOP/publish
define PUBLISH publish

define PROJLIBS ""
define SYSLIBS ""

# Default header pattern for C and C++ dynamic dependencies
#
# All globals variables for rulebase.default are kept in the $::tmakedrb array
array set ::tmakedrb {
	testruncount 0
	testpasscount 0
	testid 0
	setuptestenv 0
	objmap {}
}

# ==================================================================
# BUILT-IN Object Rules
# ==================================================================

define CHDRPATTERN {^[\t ]*#[\t ]*include[\t ]*[<\"]([^\">]*)[\">]}

proc ObjectRule.c {obj src} {
	# Capture the current value of C_FLAGS and INCPATHS
	target $obj -inputs $src -msg {note Cc $target} -getvars C_FLAGS INCPATHS -do {
		run $CCACHE $CC $C_FLAGS $CFLAGS -c $inputs -o $target
	} -dyndep {
		header-scan-regexp-recursive $INCPATHS "" $CHDRPATTERN
	}
}

proc ObjectRule.cpp {obj src} {
	# Capture the current value of CXX_FLAGS and INCPATHS
	target $obj -inputs $src -msg {note C++ $target} -getvars CXX_FLAGS INCPATHS -do {
		run $CCACHE $CXX $CXX_FLAGS $CXXFLAGS -c $inputs -o $target
	} -dyndep {
		header-scan-regexp-recursive $INCPATHS "" $CHDRPATTERN
	}
}

# ==================================================================
# PROLOG/EPILOG HOOKS
# ==================================================================
proc BuildSpecProlog {} {
	# Local phony targets build from the current directory down
	if {[local-prefix] ne ""} {
		set parentprefix [make-prefix [file dirname [local-dir]]]
		foreach t {all clean distclean test} {
			Phony $t
			target $parentprefix$t -phony -depends [make-local $t]
		}
		clean-target [make-local clean] Clean
		clean-target [make-local distclean] DistClean
	}
}

proc BuildSpecEpilog {} {
	global tmake

	# Does subdir/all have any dependencies? If not, make it depend on subdir/libs (if that rule exists)
	array set t [get-target-rule [make-local all]]
	if {[llength $t(depends)] == 0} {
		if {[is-rule? [make-local libs]]} {
			Depends all [make-local libs]
		}
	}

	if {$tmake(localmakefile) ni {none -none}} {
		set makefile [make-local $tmake(localmakefile)]
		if {[info exists tmake(build)]} {
			# Create stub makefiles in srcdir, not builddir
			set makefile [file-join $tmake(topsrcdir) $makefile]
			# XXX: Makefiles will not be deleted by distclean here!
		}
		if {![file exists $makefile]} {
			set tmakeargs "\"--mflags=\$(MFLAGS)\" \"--gnumakeflags=\$(MAKEFLAGS)\" \"--bsdmakeflags=\$(.MAKEFLAGS)\""
			if {[info exists tmake(build)]} {
				append tmakeargs " --build=$tmake(build)"
			} else {
				# Set -C before -P
				if {[local-dir] ne "."} {
					append tmakeargs " -C [join [lrepeat [llength [split [local-dir] /]] ..] /]"
				}
				if {$tmake(topsrcdir) ne "."} {
					append tmakeargs " -P $tmake(topsrcdir)"
				}
			}
			append tmakeargs " SUBDIR=[local-dir]"

			set lines {}
			lappend lines "# Stub makefile generated by tmake v$tmake(version)"
			lappend lines ".PHONY: \$(.TARGETS) \$(MAKECMDGOALS) _all"
			lappend lines "_all:"
			lappend lines "\t+@$tmake(exe) $tmakeargs [local-prefix]$tmake(defaulttarget)"
			lappend lines "\$(.TARGETS) \$(MAKECMDGOALS):"
			lappend lines "\t+@$tmake(exe) $tmakeargs [local-prefix]\$@"
			writefile $makefile [join $lines \n]\n
		}
		DistClean $tmake(localmakefile)
	}
}

# ==================================================================
# HIGH LEVEL RULES
# ==================================================================

proc Executable {args} {
	show-this-rule
	getopt {--test --nobuild --publish --strip --install: target args} args
	if {$publish} {
		# Revisit: --publish=newname?
		Publish bin $target
	}
	# Flatten and glob inputs
	set objects [Objects [Glob --all [join $args]]]

	set localtarget [make-local $target]
	Link $target {*}$objects [get-define LOCAL_LIBS]
	if {[info exists install]} {
		set flags bin
		if {$strip} {
			lappend flags strip
		}
		InstallFile [file-join $install $target] $localtarget $flags
	}
	if {$test} {
		Test --chdir $target
	} elseif {!$nobuild} {
		Phony all $localtarget
	}
}

# Link an executable from objects
proc Link {target args} {
	show-this-rule

	set args [join $args]

	define? CCLD [get-define CC]

	# Capture the current value of CCLD, LD_FLAGS and SYSLIBS
	target [make-local $target] -inputs {*}$args -depends [get-define PROJDEPS] -msg {note Link $target} -getvars CCLD LD_FLAGS PROJLIBS SYSLIBS -do {
		run $CCLD $LD_FLAGS $LDFLAGS -o $target $inputs $PROJLIBS $SYSLIBS
	}
	Clean $target
}

proc publish-one-file {dest src} {
	hard-link [file join [get-define PUBLISH] $dest] $src -vars dest $dest -msg {note Publish $dest}
}

proc make-shlib-symlinks {first args} {
	foreach alias $args {
		exec ln -s -f [file tail $first] $alias
	}
}

proc publish-shared-lib {names source} {
	set published [prefix [get-define PUBLISH]/lib/ $names]

	target $published -inputs $source -msg {note PublishSharedLib $libname}  -do {
		file delete $target
		exec ln -f $inputs [lindex $target 0]
		make-shlib-symlinks {*}$target
	} -vars libname [lindex $names 0]
	add-clean [make-local clean] $published
	add-clean [make-local distclean] $published
}

proc expand-filespec {dir filelist keepdir} {
	set result {}

	foreach spec $filelist {
		if {$spec eq ""} {
			continue
		}
		if {[string match *=* $spec]} {
			lassign [split $spec =] target src
			lappend result [file-join $dir $target] [make-local $src]
			continue
		}
		if {[string match {*[{}*?]*} $spec]} {
			set srcs [Glob --all $spec]
		} else {
			set srcs $spec
		}
		foreach src $srcs {
			if {$keepdir} {
				lappend result [file-join $dir $src] [make-local $src]
			} else {
				lappend result [file-join $dir [file tail $src]] [make-local $src]
			}
		}
	}
	#puts "expand-filespec: $filelist => $result"
	return $result
}

proc Publish {args} {
	show-this-rule
	getopt {--keepdir dir args} args

	foreach {dest src} [expand-filespec $dir $args $keepdir] {
		publish-one-file $dest $src
	}
}

# Expands a list of objects which may contain library aliases of the form <lib>$basename
# which are then expanded to the list of objects for the library
# The list of objects is created by the ArchiveLib rule
proc expand-objects {objs} {
	set result {}
	foreach obj $objs {
		if {[string match <lib>* $obj]} {
			if {![dict exists $::tmakedrb(objmap) $obj]} {
				build-error "Error: Unable to find objects for unknown lib $obj"
				return -code break
			}
			# XXX: How to guarantee that $SH_CFLAGS are set on these objects?
			# (Either directly via ObjectCFlags or with a top-level CFlags)
			#
			lappend result {*}[dict get $::tmakedrb(objmap) $obj]
		} else {
			lappend result $obj
		}
	}
	return $result
}

proc ArchiveLib {args} {
	show-this-rule
	getopt {--publish --install: basename args} args

	# Flatten and glob inputs
	set objects [Objects [Glob --all [join $args]]]

	set libname lib$basename.a
	set libalias <lib>$basename

	set target [make-local $libname]
	target $target -inputs {*}$objects -msg {note Ar $target} -do {
		file delete $target
		run $AR $ARFLAGS $target {*}[expand-objects $inputs]
		run $RANLIB $target
	}

	# Note: Libraries are not built by default, but are added to a local 'libs' rule
	Phony libs $target
	Clean $libname
	define-append LOCAL_LIBS $target

	if {[info exists install]} {
		InstallFile [file-join $install $libname] $target
	}
	if {$publish} {
		Publish lib $libname

		# Alias to make UseLibs work
		targetalias $libalias [get-define PUBLISH]/lib/$libname

		# Used to make expand-objects work
		dict set ::tmakedrb(objmap) $libalias $objects
	}
}

proc SharedLib {args} {
	show-this-rule
	getopt {--publish --strip --version: --install: basename args} args

	if {![info exists version]} {
		set version 0
	}

	set n 0
	foreach part [split $version .] {
		if {![string is integer -strict $part]} {
			set n -1
			break
		}
		incr n
	}
	if {$n < 0 || $n > 3} {
		dev-error "Not a valid shared library version number: $version"
	}

	# What names may our shared lib have?
	set nameinfo [list [get-define SH_SOEXTVER] $version %s [get-define SH_SOEXT]]
	if {$n > 1} {
		lappend nameinfo [get-define SH_SOEXTVER] [lindex [split $version .] 0]
	}

	set names {}
	set libname {}

	foreach {fmt version} $nameinfo {
		set name lib$basename[format $fmt $version]
		if {$libname eq {}} {
			set libname $name
		}
		if {$name ni $names} {
			lappend names $name
		}
	}

	# Flatten and glob inputs
	set objects [Objects [Glob --all [join $args]]]

	set locallibname [make-local $libname]
	set srcs [join $args]
	set libalias <lib>$basename
	ObjectCFlags $srcs [get-define SH_CFLAGS]

	# Note: We won't link against local archive libs (LOCAL_LIBS) since they have not been compiled -fpic
	# The SharedLibLink rule includes a run-time check for linking against archive libs
	SharedLibLink $libname {*}$objects

	# Only the fully versioned named is built in the local dir
	Phony libs $locallibname
	Clean $libname

	# Note: --publish is dummy. Shared libs always need to be published to be used
	incr publish

	if {$publish} {
		# Publish along with the various symlinks
		publish-shared-lib $names $locallibname
		# Alias to make UseLibs work
		targetalias $libalias [get-define PUBLISH]/lib/$libname

		# Used to make expand-objects work
		dict set ::tmakedrb(objmap) $libalias $objects

		# Local executables only link against this lib if it is published
		# The reason is that it gets difficult to manage LD_LIBRARY_PATH or equalivalent.
		# If the shared lib is published, a single definition of LD_LIBRARY_PATH=$PUBLISH/lib will work for all shared libs
		# Thus UseLibs here rather than adding to LOCAL_LIBS

		UseLibs $basename
	}
	if {[info exists install]} {
		set flags bin
		if {$strip} {
			if {![define-exists STRIPLIB]} {
				dev-error "No \$STRIPLIB defined for this platform"
			}
			lappend flags striplib
		}
		InstallFile [file-join $install $libname] $locallibname $flags
	}
}

# If desired, this can be aliased to SharedLib in project.spec
alias Lib ArchiveLib

proc SharedObject {args} {
	show-this-rule

	getopt {--install: sharedobj args} args

	set args [join $args]

	# Must build objects with -fpic, etc.
	ObjectCFlags $args [get-define SHOBJ_CFLAGS]
	SharedObjectLink $sharedobj [Objects $args]

	set sharedobj [make-local $sharedobj]

	Phony all $sharedobj
	if {[info exists install]} {
		Install --bin $install $sharedobj
	}
}

# Link a dynamically loadable shared object from objects
proc SharedObjectLink {target args} {
	show-this-rule

	set args [join $args]

	# Note that we only link against local shared libs, not archive libs
	target [make-local $target] -inputs {*}$args -msg {note SharedObject $target} -do {
		run $CC $SHOBJ_LDFLAGS -o $target $inputs $SYSLIBS
	}
	Clean $target
}

# Link a shared library from objects
proc SharedLibLink {target args} {
	show-this-rule

	set args [join $args]

	set setsoname {}
	if {[get-define SH_SOPREFIX ""] ne ""} {
		set setsoname [get-define SH_SOPREFIX][file tail $target]
	}

	define? CCLD [get-define CC]

	# XXX: Here we use $LDFLAGS to capture any user-specied link flags (.e.g. -mbig-endian).
	#      Assume that these are required both for shared libs and for executables.
	#      Is it necessary to separate these two?
	#      Also, is LinkFlags/LD_FLAGS also required?

	target [make-local $target] -inputs {*}$args -depends [get-define PROJDEPS] -msg {note SharedLib $target} -getvars CCLD PROJLIBS SYSLIBS -do {
		run $CCLD $SH_LDFLAGS $LDFLAGS -o $target $setsoname {*}[expand-objects $inputs] $PROJLIBS $SYSLIBS
	} -vars setsoname $setsoname
	Clean $target
}

# Create an object file from each source file
# Uses $OBJSRULES(.ext) to determine the build rule
# Returns a list of objects
# Accepts object files (.o) in addition to source files
# and simply returns them
proc Objects {args} {
	show-this-rule
	set args [join $args]
	set objs {}
	foreach src $args {
		if {[string match <lib>* $src]} {
			lappend objs $src
		} else {
			lappend objs [Object [change-ext .o $src] $src]
		}
	}
	return $objs
}

proc Object {target src} {
	show-this-rule
	set ext [file ext $src]
	set obj [make-local $target]
	set src [make-local $src]
	if {$ext ne ".o"} {
		set extra {}
		if {[info commands ObjectRule$ext] eq ""} {
			dev-error "Don't know how to build Object from $src"
		}
		ObjectRule$ext $obj $src
		Clean $target
	}
	return $obj
}

# Add object-specific CFLAGS
proc ObjectCFlags {srcs args} {
	show-this-rule
	foreach src $srcs {
		set obj [change-ext .o $src]
		target [make-local $obj] -vars C_FLAGS [join $args]
	}
}

proc CFlags {args} {
	show-this-rule
	define-append C_FLAGS {*}$args
}

proc C++Flags {args} {
	define-append CXX_FLAGS {*}$args
}

proc LinkFlags {args} {
	define-append LD_FLAGS {*}$args
}

proc Linker {linker} {
	define CCLD $linker
}

proc UseLibs {args} {
	# Create/append to PROJLIBS (the link line)
	if {[get-define PROJLIBS] eq ""} {
		define PROJLIBS "-L[get-define PUBLISH]/lib"
	}
	define-append PROJLIBS [prefix -l $args]

	# Now the dependencies
	define-append PROJDEPS [prefix <lib> $args]
}

proc IncludePaths {args} {
	show-this-rule
	foreach dir $args {
		foreach prefix [list [local-dir] [top-src-dir]] {
			set dir [file-join $prefix $dir]
			if {$dir ni [get-define INCPATHS]} {
				define-append INCPATHS $dir
				CFlags [prefix -I $dir]
				C++Flags [prefix -I $dir]
			}
		}
	}
}

proc load-config-file {filename} {
	# All lines look like one of:
	#CONFIG_BOOL_VALUE=y (or m)
	#CONFIG_STR_VALUE="string value"
	#CONFIG_INT_VALUE=123
	set n 0
	foreach line [split [readfile $filename] \n] {
		incr n
		set line [string trim $line]
		if {$line eq "" || [string match "#*" $line]} {
			continue
		}
		if {[regexp {^([^=:]*):?=(.*)} $line -> name value]} {
			set value [string trim $value]
			if {$value eq "y"} {
				set value 1
			} elseif {[string match {"*"} $value]} {
				set value [lindex $value 0]
			}
			#puts "define $name $value"
			define $name $value
		} else {
			puts "$filename:$n: Warning: Failed to parse $line"
		}
	}
}

proc Load {args} {
	show-this-rule

	getopt {--nocare --config filename} args
	# XXX: Should we allow loading an out-of-tree file?
	set filename [make-local $filename]
	if {[file exists $filename]} {
		if {$config} {
			load-config-file $filename
		} else {
			source $filename
		}
		# If we find the file, we now care about it
		set nocare 0
	}
	lappend ::tmake(projfiles) $filename $nocare
}

proc UseSystemLibs {args} {
	define-append SYSLIBS {*}$args
}

proc PublishIncludes {args} {
	show-this-rule
	getopt {--keepdir args} args

	foreach {dest src} [expand-filespec include $args $keepdir] {
		publish-one-file $dest $src
	}
}

proc setup-test-env {} {
	# Set up LD_LIBRARY_PATH (or equivalent) for tests
	if {$::tmakedrb(setuptestenv) == 0} {
		incr ::tmakedrb(setuptestenv)
		set ldlibpath [get-define LD_LIBRARY_PATH]
		if {$ldlibpath ne ""} {
			set path [getenv $ldlibpath ""]
			# Must use a full path here since tests do chdir
			set addlib [file-join [get-define TOPBUILDDIR] [get-define PUBLISH]/lib]
			append-with-space path $addlib $::tcl_platform(pathSeparator)
			set ::env($ldlibpath) $path
		}
	}
}

# Run an executable test
# The executable must be built in the current dir
#
proc Test {args} {
	show-this-rule

	getopt {--interp: --chdir --quiet command args} args
	set testid test#[incr ::tmakedrb(testid)]
	set depends {}
	set localcommand [make-local $command]

	set opts {}
	set deps {}
	set vars {}
	set testcommand {}

	if {$chdir} {
		lappend opts -chdir
	}
	if {!$quiet} {
		lappend opts -msg [list note "Test $localcommand"]
	}

	# If there is an interpreter, find it
	if {[info exists interp]} {
		lassign [find-project-bin $interp -chdir $chdir -optional 1] dep filename

		# In this case, the command is a script - find it
		if {$chdir} {
			set scriptpath [file-src-relative $localcommand]
		} else {
			set scriptpath [file-src $localcommand]
		}
		lappend vars testcommand [list $filename $scriptpath {*}$args]

		if {$dep ne ""} {
			lappend deps $dep
		}

	} else {
		# Find the local or published command and add it to the command and deps
		lassign [find-project-bin $command -chdir $chdir -optional 0] dep filename

		lappend vars testcommand [list $filename {*}$args]
		lappend deps $dep
	}

	# set up srcpath to allow the test command/script to find resources
	if {$chdir} {
		lappend vars srcpath [file-src-relative [local-dir]]
	} else {
		lappend vars srcpath [file-src [local-dir]]
	}

	target [make-local $testid] -phony -depends $deps -vars {*}$vars {*}$opts -do {
		setup-test-env
		set ::env(SRCDIR) $srcpath
		incr ::tmakedrb(testruncount)
		run $testcommand
		incr ::tmakedrb(testpasscount)
	}
	Phony test [make-local $testid]

	return $testid
}

proc CopyFile {dest source} {
	show-this-rule
	target [make-local $dest] -inputs [make-local $source] -msg "note Copy $dest" -do {
		file delete $target
		file copy $inputs $target
	}
	Clean $dest
}

proc hard-link {args} {
	show-this-rule

	getopt {--fallback dest source args} args

	# XXX: If the platform doesn't support hard links
	# and --fallback is set, fall back to soft links
	# and then to file copy
	# Want to depend on the existence of the dir, not the time
	target $dest -inputs $source -do {
		file delete $target
		exec ln $inputs $target
	} {*}$args
	add-clean [make-local clean] $dest
	add-clean [make-local distclean] $dest
}

# Helper for installing files
proc install-file {target source flags} {
	vputs "Copy $source $target"
	file copy -force $source $target
	if {"bin" in $flags} { chmodx-file $target }
	if {"strip" in $flags} { strip-file $target }
	if {"striplib" in $flags} { striplib-file $target }
}

proc chmodx-file {target} {
	vputs "Chmod $target"
	exec chmod +x $target
}

proc strip-file {target} {
	vputs "Strip $target"
	exec [get-define STRIP true] $target
}

proc striplib-file {target} {
	vputs "StripLib $target"
	exec [get-define STRIPLIB false] $target
}

proc InstallFile {dest src {flags {}}} {
	show-this-rule

	#puts "InstallFile $dest $src"

	set destfile [get-define DESTDIR]$dest
	if {[is-target? $destfile]} {
		user-notice [warning-location "Warning: Duplicate install rule for $dest at [make-source-location $destfile]"]
		return
	}
	target $destfile -nocache -inputs $src -vars dest $dest flags $flags -msg {note "Install $dest"} -do {
		install-file $target $inputs $flags
	}
	target install -depends $destfile

	# This file also needs to be uninstalled
	add-clean uninstall $destfile
}

proc Install {args} {
	show-this-rule

	getopt {--bin --strip --keepdir destdir args} args
	set flags {}
	if {$bin} {
		lappend flags bin
	}
	if {$strip} {
		lappend flags strip
	}

	set srcs {}
	foreach {dest src} [expand-filespec $destdir $args $keepdir] {
		lappend srcs $src
		InstallFile $dest $src $flags
	}
	return $srcs
}

proc remove-empty-directories {files} {
	set dirs {}
	foreach file $files {
		while {1} {
			set dirname [file dirname $file]
			if {$dirname eq $file || $dirname eq "."} {
				break
			}
			dict set dirs [file dirname $file] 1
			set file $dirname
		}
	}
	if {[dict size $dirs]} {
		# Sort in reverse order so that abc/def/ghi is removed before abc/def
		#dputs m "file delete {*}[lsort -decreasing [dict keys $dirs]]"
		foreach dir [lsort -decreasing [dict keys $dirs]] {
			catch { file delete $dir }
		}
	}
}

# Helper to clean files (and any empty directories)
proc clean-files {files {msg {}}} {
	if {[llength $files]} {
		vputs "rm $files"
		if {$msg ne ""} {
			note "Clean [llength $files] $msg"
		}
		file delete {*}$files
		# Also need to remove any empty directories
		remove-empty-directories $files
	}
}

# This creates the clean target of the given type, e.g. clean, distclean
#
proc clean-target {type msg} {
	target $type -phony -nofail -vars cleanfiles {} -msg "note $msg [local-dir]" -do {
		clean-files $cleanfiles
	}
}

proc Clean {args} {
	if {[lindex $args 0] in {clean distclean}} {
		dev-error "fix call to Clean"
	}
	add-clean [make-local clean] [make-local {*}[join $args]]
	# DistClean also cleans these files
	DistClean {*}$args
}

proc DistClean {args} {
	add-clean [make-local distclean] [make-local {*}[join $args]]
}

# This adds files to be cleaned for the given type
#
proc add-clean {type filelist} {
	# This could be done with Depends or target, but it is much
	# faster to simply append to the rule variable directly
	#Depends [make-local $type] -vars cleanfiles [join $args]
	target-add-var $type cleanfiles $filelist
}

# Returns a list of {dependency filename}
#
proc find-project-bin {bin args} {
	array set opts [list -chdir 0 -optional 0 {*}$args]

	set localbin [make-local $bin]

	if {[is-target? $localbin]} {
		dputs m "[find-source-location]: find-project-bin: $localbin is a local target"
		if {$opts(-chdir)} {
			return [list $localbin ./$bin]
		} else {
			# Use ./ if local-dir is "."
			return [list $localbin [local-dir]/$bin]
		}
	}

	if {[regexp {^<bin>(.*)} $bin -> basename]} {
		dputs m "[find-source-location]: find-project-bin: $bin is a publish target"
		set publishbin [get-define PUBLISH]/bin/$basename
		if {$opts(-chdir)} {
			# Need to adjust the interp to account for chdir
			return [list $publishbin [file-src-relative $publishbin]]
		} else {
			return [list $publishbin $publishbin]
		}
	}

	if {[file-src-exists $localbin]} {
		dputs m "[find-source-location]: find-project-bin: $localbin exists as source"
		if {$opts(-chdir)} {
			# Need to adjust the interp to account for chdir
			return [list $localbin [file-src-relative $localbin]]
		} else {
			return [list $localbin [file-src $localbin]]
		}
	}

	if {$opts(-optional)} {
		dputs m "[find-source-location]: find-project-bin: $bin is assumed to be external"
		return [list "" $bin]
	}

	# Not found
	dev-error "$bin is neither a local nor a published (<bin>) target"
}

proc Generate {args} {
	# XXX: Would be nice if script and inputs were optional
	getopt {--interp: target script inputs rules args} args

	set localtarget [make-local {*}$target]

	set opts {}
	if {[info exists interp]} {
		lassign [find-project-bin $interp] dep filename
		lappend opts -depends $dep -vars interp $filename
	}
	if {$script ne ""} {
		lassign [find-project-bin $script] dep filename
		lappend opts -depends $dep -vars script $filename
	}
	target $localtarget -inputs {*}[make-local {*}$inputs] {*}$opts -do $rules -msg {note Generate $target} {*}$args
	Clean $target
}

proc Depends {target args} {
	target [make-local {*}$target] -depends {*}$args
}

proc Phony {target args} {
	show-this-rule
	target [make-local {*}$target] -phony -depends {*}$args
}

proc LocalMakefile {name} {
	# XXX Should be an API for this
	set ::tmake(localmakefile) $name
}

proc DefaultTarget {name} {
	set ::tmake(defaulttarget) $name
}

# XXX: Only useful for simple cases of building a host executable from C sources
# 
proc HostExecutable {target args} {
	set localtarget [make-local $target]
	target $localtarget -inputs {*}[make-local {*}$args] -getvars HOSTCFLAGS -do {
		run $CC_FOR_BUILD $HOSTCFLAGS -o $target $inputs
	} -dyndep {
		header-scan-regexp-recursive $local "" $CHDRPATTERN
	}
	Publish bin $target
	Clean $target
	return $localtarget
}

proc add-publish-include {} {
	# Can't use IncludePaths here because we only want build paths
	set dir [get-define PUBLISH]/include
	if {$dir ni [get-define INCPATHS]} {
		define-append INCPATHS $dir
		CFlags [prefix -I $dir]
		C++Flags [prefix -I $dir]
	}
}

# XXX: Use an official API for this
lappend ::tmake(deferred) {
	add-publish-include
}
# ==================================================================
# Built-in targets
# ==================================================================

clean-target clean Clean
clean-target distclean DistClean
clean-target uninstall Uninstall

Phony all
Phony libs
Phony install all
Phony test

Depends all
Depends clean clean-orphans
Depends distclean clean-orphans
Depends test clean-orphans

Phony clean-orphans -do {
	clean-files [get-orphan-targets] "orphan targets"
	discard-orphan-targets
}
