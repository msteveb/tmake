# vim:set syntax=tcl:
# These are the built-in rules
#
# They can be replaced if necessary

# ==================================================================
# Default variable settings and rules
# ==================================================================

# XXX: If settings are loaded via Load, these should all be ignored
define? CCACHE ""
define? CC cc
define? CC_FOR_BUILD cc
define? CXX c++
define? AR ar
define? RANLIB ranlib
define? ARFLAGS cr
define? SH_LINKFLAGS ""
define? CFLAGS ""
define? CXXFLAGS ""
define? LDFLAGS ""

define? SH_CFLAGS ""
define? SH_LDFLAGS ""
define? SHOBJ_CFLAGS ""
define? SHOBJ_LDFLAGS ""


define? LOCAL_LIBS ""
define? DESTDIR ""
define? OBJCFLAGS ""
define? INCPATHS ""

# These are set by the project via CFlags, ObjectCFlags, LinkFlags, etc.
set C_FLAGS ""
set CXX_FLAGS ""
set LD_FLAGS ""

# XXX Should be $TOP/publish
set PUBLISH publish

set PROJLIBS ""
set SYSLIBS ""

proc ObjectRule.c {obj src} {
	# Capture the current value of C_FLAGS and INCPATHS
	target $obj -inputs $src -msg {note Cc $target} -getvars C_FLAGS INCPATHS -do {
		run $CCACHE $CC $C_FLAGS $CFLAGS -c $inputs -o $target
	} -dyndep {
		header-scan-regexp-recursive $INCPATHS $HDRPATTERN
	}
}

proc ObjectRule.cpp {obj src} {
	# Capture the current value of CXX_FLAGS and INCPATHS
	target $obj -inputs $src -msg {note C++ $target} -getvars CXX_FLAGS INCPATHS -do {
		run $CCACHE $CXX $CXX_FLAGS $CXXFLAGS -c $inputs -o $target
	} -dyndep {
		header-scan-regexp-recursive $INCPATHS $HDRPATTERN
	}
}

set HDRPATTERN {^[\t ]*#[\t ]*include[\t ]*[<\"]([^\">]*)[\">]}

set SHAREDOBJRULE {run $CC $SHOBJ_LDFLAGS -o $target $inputs $SYSLIBS}

lappend tmake(subdirvars) C_FLAGS CXX_FLAGS LD_FLAGS PROJLIBS SYSLIBS INCPATHS

# ==================================================================
# PROLOG/EPILOG HOOKS
# ==================================================================
proc BuildSpecProlog {} {
	# Local phony targets build from the current directory down
	if {[local-prefix] ne ""} {
		foreach t {all clean distclean test uninstall} {
			Phony $t [make-local $t]
			Phony [make-local $t]
		}
		CleanTarget clean
		CleanTarget distclean
		CleanTarget uninstall
	}
	IncludePaths .
}

proc BuildSpecEpilog {} {
	if {$::tmake(localmakefile) ni {none -none}} {
		set makefile [make-local $::tmake(localmakefile)]
		if {![file exists $makefile]} {
			writefile $makefile "_all:\n\t+@$::tmake(exe) \$(MFLAGS) $::tmake(prefix)all\n\n\
\$(.TARGETS) \$(MAKECMDGOALS):\n\t+@$::tmake(exe) \$(MFLAGS) $::tmake(prefix)\$@\n"
		}
		Clean distclean $makefile
	}
}

# ==================================================================
# HELPERS
# ==================================================================

# Returns a list of pairs: src dest
# The src is a local path, while the dest is relative.
# so ssl/*.h might return: {axtls/ssl/file.h ssl/file.h}
#
proc expand-wildcards {arglist} {
	set pairs {}
	foreach i $arglist {
		if {[string match {*[*?]*} $i]} {
			if {[string match {*{*}*} $i]} {
				dev-error "Braced wildcards not supported: $i"
			}
			set destdir [file dirname [make-local $i]]
			set globdir [file-src $destdir]
			if {![file isdir $globdir]} {
				puts "Warning: $globdir does not exist"
				continue
			}
			set pattern [file tail $i]
			set count 0
			foreach j [readdir $globdir] {
				if {[string match $pattern $j]} {
					incr count
					lappend pairs [file-join $globdir $j] [file-join $destdir $j]
				}
			}
			if {$count == 0} {
				puts "Warning: No matches for [make-local $i]"
			}
		} elseif {[string match *=* $i]} {
			lassign [split $i =] target src
			lappend pairs [make-local $src] $target
		} elseif {$i ne ""} {
			lappend pairs [make-local $i] $i
		}
	}
	#puts "expand-wildcards [make-local $arglist] => $pairs"
	return $pairs
}

# ==================================================================
# HIGH LEVEL RULES
# ==================================================================

proc Executable {args} {
	show-this-rule
	getopt {--test --publish --install: target args} args
	if {$publish} {
		# Revisit: --publish=newname?
		Publish bin $target
	}
	set localtarget [make-local $target]
	Link $localtarget {*}[Objects {*}[join $args]] {*}$::LOCAL_LIBS {*}$::PROJLIBS
	if {[info exists install]} {
		InstallFile [file-join $install $target] $localtarget 1
	}
	if {$test} {
		Test --chdir $target
	} else {
		Phony [make-local all] $localtarget
	}
}

# Link an executable from objects
proc Link {target args} {
	show-this-rule

	define? CCLD $::CC

	# Capture the current value of CCLD, LD_FLAGS and SYSLIBS
	target $target -inputs {*}$args -msg {note Link $target} -getvars CCLD LD_FLAGS SYSLIBS -do {
		run $CCLD $LD_FLAGS $LDFLAGS -o $target $inputs $SYSLIBS
	}
	Clean clean $target
}

proc PublishOneFile {dest src} {
	HardLink [file join $::PUBLISH $dest] $src -vars dest $dest -msg {note Publish $dest}
}

proc Publish {args} {
	show-this-rule
	getopt {--keepdir dir args} args

	foreach {src dst} [expand-wildcards $args] {
		if {$keepdir} {
			PublishOneFile $dir/$dst $src
		} else {
			PublishOneFile $dir/[file tail $dst] $src
		}
	}
}

proc ArchiveLib {args} {
	show-this-rule
	getopt {--publish --install: basename args} args

	set libname lib$basename.a

	set target [make-local $libname]
	target $target -inputs {*}[Objects {*}[join $args]] -msg {note Ar $target} -do {
		file delete $target
		run $AR $ARFLAGS $target $inputs
		run $RANLIB $target
	}
	Phony [make-local all] $target
	Clean clean $target
	define-append LOCAL_LIBS $target

	if {[info exists install]} {
		InstallFile [file-join $install $libname] $target
	}
	if {$publish} {
		Publish lib $libname
	}
}

alias Lib ArchiveLib

proc SharedObject {args} {
	show-this-rule

	getopt {--install: sharedobj args} args

	set sharedobj [make-local $sharedobj]

	# XXX: Should build objects with -fpic, etc.
	# Use -vars/ObjectCFlags to do this
	SharedObjectLink $sharedobj {*}[Objects {*}[join $args]]
	Phony [make-local all] $sharedobj
	if {[info exists install]} {
		Install --bin $install $sharedobj
	}
}

# Link an executable from objects
proc SharedObjectLink {target args} {
	show-this-rule
	# Note that we only link against local shared libs, not archive libs
	target $target -inputs {*}$args -do $::SHAREDOBJRULE -msg {note SharedObject $target}
	Clean clean $target
}

# Create an object file from each source file
# Uses $OBJSRULES(.ext) to determine the build rule
# Returns a list of objects
# Accepts object files (.o) in addition to source files
# and simply returns them
proc Objects {args} {
	show-this-rule
	set objs {}
	foreach src $args {
		lappend objs [Object [change-ext .o $src] $src]
	}
	return $objs
}

proc Object {obj src} {
	show-this-rule
	set ext [file ext $src]
	set obj [make-local $obj]
	set src [make-local $src]
	if {$ext ne ".o"} {
		set extra {}
		if {[info procs ObjectRule$ext] eq ""} {
			dev-error "Don't know how to build Object from $src"
		}
		ObjectRule$ext $obj $src
		Clean clean $obj
	}
	return $obj
}

# Add object-specific CFLAGS
proc ObjectCFlags {srcs args} {
	show-this-rule
	foreach src $srcs {
		set obj [change-ext .o $src]
		target [make-local $obj] -vars C_FLAGS [join $args]
	}
}

proc CFlags {args} {
	show-this-rule
	define-append C_FLAGS {*}$args
}

proc C++Flags {args} {
	define-append CXX_FLAGS {*}$args
}

proc LinkFlags {args} {
	define-append LD_FLAGS {*}$args
}

proc Linker {linker} {
	define CCLD $linker
}

proc UseLibs {args} {
	foreach lib $args {
		# REVISIT: If we are to support linking against project shared libs, PROJLIBS
		#          needs to be just a list of libs which will then be resolved to actual
		#          targets (archive or shared) at deferred resolution time
		define-append PROJLIBS [file join $::PUBLISH lib lib$lib.a]
	}
}

proc IncludePaths {args} {
	show-this-rule
	foreach dir $args {
		foreach prefix [list [local-dir] $::tmake(topsrcdir)] {
			set dir [file-join $prefix $dir]
			if {$dir ni $::INCPATHS} {
				define-append INCPATHS $dir
				CFlags [prefix -I $dir]
				C++Flags [prefix -I $dir]
			}
		}
	}
}

proc load-config-file {filename} {
	# All lines look like one of:
	#CONFIG_BOOL_VALUE=y (or m)
	#CONFIG_STR_VALUE="string value"
	#CONFIG_INT_VALUE=123
	set n 0
	foreach line [split [readfile $filename] \n] {
		incr n
		set line [string trim $line]
		if {$line eq "" || [string match "#*" $line]} {
			continue
		}
		if {[regexp {^([^=:]*):?=(.*)} $line -> name value]} {
			set value [string trim $value]
			if {$value eq "y"} {
				set value 1
			} elseif {[string match {"*"} $value]} {
				set value [lindex $value 0]
			}
			#puts "define $name $value"
			define $name $value
		} else {
			puts "$filename:$n: Warning: Failed to parse $line"
		}
	}
}

proc Load {args} {
	show-this-rule

	getopt {--nocare --config filename} args
	set filename [make-local $filename]
	if {![file exists $filename]} {
		if {!$nocare} {
			user-error "$filename does not exist, do you need run ./configure?"
		}
	} else {
		if {$config} {
			load-config-file $filename
		} else {
			uplevel #0 [list source $filename]
		}
	}
	# Add a build dependency
	lappend ::tmake(projfiles) $filename
}

proc UseSystemLibs {args} {
	define-append SYSLIBS {*}$args
}

proc PublishIncludes {args} {
	getopt {--keepdir args} args

	foreach {src dst} [expand-wildcards $args] {
		if {$keepdir} {
			PublishOneFile include/$dst $src
		} else {
			PublishOneFile include/[file tail $dst] $src
		}
	}
}

proc Test {args} {
	show-this-rule

	getopt {--runwith: --chdir --quiet command args} args
	set testid [make-local test:[incr ::testid]]
	set depends {}
	set command $command
	set localcommand [make-local $command]
	set extra {}
	if {$chdir} {
		lappend extra -chdir
		set runcmd ./$command
	} else {
		set runcmd $localcommand
	}
	if {!$quiet} {
		lappend extra -msg {note "Test $command"}
	}
	# XXX: If cross compiling, the existence of $runwith
	#      and $command as targets is no guarantee that they
	#      can run.
	set maybe-depends $localcommand
	if {[info exists runwith]} {
		set testcommand "$runwith $runcmd [join $args]"
		# I think this is all wrong.
		# How can the command find where $runwith resolves to (if anywhere)
		# Want it stored in a variable.
		# Should it be like header scanning and INCPATHS?
		lappend maybe-depends $runwith $::PUBLISH/bin/$runwith
	} else {
		set testcommand "$runcmd [join $args]"
	}

	# Note: We don't yet know if $runwith and/or $command are targets, so defer until all rules are read.
	# 
	target $testid -phony -maybe-depends {*}${maybe-depends} -vars testcommand $testcommand command $localcommand {*}$extra -do {
		incr ::tmake(testruncount)
		run {*}$testcommand
		incr ::tmake(testpasscount)
	}
	Phony [make-local test] $testid

	return $testid
}

proc CopyFile {dest source} {
	show-this-rule
	target [make-local $dest] -inputs [make-local $source] -msg "note Copy $dest" -do {
		file copy $inputs $target
	}
	Clean clean [make-local $dest]
}

proc HardLink {args} {
	show-this-rule

	getopt {--fallback dest source args} args

	# XXX: If the platform doesn't support hard links
	# and --fallback is set, fall back to soft links
	# and then to file copy
	# Want to depend on the existence of the dir, not the time
	target $dest -inputs $source -do {
		file delete $target
		exec ln $inputs $target
	} {*}$args
	Clean clean $dest
}

# Helper for installing files
proc install-file {target source bin} {
	vputs "Copy $source $target"
	file copy -force $source $target
	if {$bin} {
		vputs "chmod +x $target"
		exec chmod +x $target
	}
}

proc InstallFile {dest src {bin 0}} {
	show-this-rule

	set destfile $::DESTDIR$dest
	target $destfile -nocache -inputs $src -vars dest $dest bin $bin -msg {note "Install $dest"} -do {
		install-file $target $inputs $bin
	}
	Depends install $destfile

	# This file also needs to be uninstalled
	Clean uninstall $destfile

	#if {[dict exists $::tmake(install) $dest]} {
	#	user-notice "Warning: Duplicate install rule for $dest"
	#}
}

proc Install {args} {
	show-this-rule

	getopt {--bin --keepdir destdir args} args

	set srcs {}
	foreach {src dst} [expand-wildcards $args] {
		lappend srcs $src
		if {$keepdir} {
			InstallFile [file-join $destdir $dst] $src $bin
		} else {
			InstallFile [file-join $destdir [file tail $dst]] $src $bin
		}
	}
	return $srcs
}

proc remove-empty-directories {files} {
	set dirs {}
	foreach file $files {
		while {1} {
			set dirname [file dirname $file]
			if {$dirname eq $file || $dirname eq "."} {
				break
			}
			dict set dirs [file dirname $file] 1
			set file $dirname
		}
	}
	if {[dict size $dirs]} {
		# Sort in reverse order so that abc/def/ghi is removed before abc/def
		#dputs m "file delete {*}[lsort -decreasing [dict keys $dirs]]"
		foreach dir [lsort -decreasing [dict keys $dirs]] {
			catch { file delete $dir }
		}
	}
}

# This creates the clean target of the given type, e.g. clean, distclean
#
proc CleanTarget {type} {
	Phony [make-local $type] -nofail -vars cleanfiles {} -do {
		note "Clean $target"
		if {$cleanfiles ne ""} {
			vputs "rm $cleanfiles"
			file delete {*}$cleanfiles
			# Also need to remove any empty directories
			remove-empty-directories $cleanfiles
		}
	}
}

# This adds files to be cleaned for the given type
#
proc Clean {type args} {
	# This could be done with Depends or target, but it is much
	# faster to simply append to the rule variable directly
	#Depends [make-local $type] -vars cleanfiles [join $args]
	target-add-var [make-local $type] cleanfiles [join $args]
}

proc Generate {target script inputs rules args} {
	# XXX: Would be nice if script and inputs were optional
	set target [make-local {*}$target]
	if {$script ne ""} {
		set localscript [make-local $script]
		if {[is-target? $localscript]} {
			set script $localscript
		} elseif {[file-src-exists $localscript]} {
			set script [file-src $localscript]
		} else {
			# A non-local generator script must be in publish/bin
			set script [file join $::PUBLISH bin $script]
		}
	}
	# If running a script in the current dir need ./$script
	if {[string match */* $script]} {
		set runscript $script
	} else {
		set runscript [local-dir]/$script
	}
	target $target -inputs {*}[make-local {*}$inputs] -depends $script -vars script $runscript -do $rules -msg {note Generate $target} {*}$args
	Clean clean $target
}

proc Depends {target args} {
	target $target -depends {*}$args
}

proc Phony {target args} {
	show-this-rule
	Depends $target -phony -depends {*}$args
}

proc LocalMakefile {name} {
	set ::tmake(localmakefile) $name
}

# ==================================================================
# Built-in targets
# ==================================================================

CleanTarget clean
CleanTarget distclean
CleanTarget uninstall

Depends clean clean-orphans
Depends distclean clean

Phony all
Phony install all
Phony test

Phony clean-orphans -do {
	set cleanfiles [get-orphan-targets]
	if {[llength $cleanfiles]} {
		note "Clean [llength $cleanfiles] orphan targets"
		file delete {*}$cleanfiles
		discard-orphan-targets
	}
}

# XXX: Use an official API for this
lappend tmake(deferred) {
	IncludePaths $PUBLISH/include
}
