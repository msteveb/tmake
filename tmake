#!/usr/bin/env jimsh
# vim:set syntax=tcl:

# ==================================================================
# Initialiation
# ==================================================================

set tmake(debug) 0
set tmake(verbose) 0
set tmake(norun) 0
set tmake(current) {}
set tmake(targets) {}
set tmake(clean) {clean {} distclean {} uninstall {}}
set tmake(install) {}
set tmake(installbin) {}
set tmake(installdirs) {}
set tmake(numtargets) 0
set tmake(showtime) 0
set tmake(quickstop) 0
set tmake(modules) {}

proc make {argv} {
	global tmake

	# 'misc' is needed before we can do anything, so set a temporary libdir
	# in case this is the development version
	set tmake(dir) [file dirname $::argv0]
	set tmake(libdir) $tmake(dir)/lib

	use compat
	set tmake(start) [clock-millis]

	use debug util getopt targets config

	# Parse the user options
	set targets {}
	foreach a $argv {
		if {[regexp {([^=]*)=(.*)} $a -> n v]} {
			if {$n eq "V"} {
				set ::tmake(verbose) $v
			} elseif {$n eq "D"} {
				set ::tmake(debug) $v
			} elseif {$n eq "P"} {
				dumptargets
			} elseif {$n eq "N"} {
				incr ::tmake(norun)
			} elseif {$n eq "T"} {
				incr ::tmake(showtime)
			} elseif {$n eq "Q"} {
				incr ::tmake(quickstop)
			} else {
				define $n $v
			}
		} elseif {[string match -* $a]} {
			switch -glob -- $a {
				--debug - -d {
					set ::tmake(debug) 1
				}
				--verbose - -v {
					set ::tmake(verbose) 1
				}
				--dry-run - --just-print - -n {
					set ::tmake(norun) 1
				}
				--tim* - -t {
					incr ::tmake(showtime)
				}
				-q - --quickstop {
					incr ::tmake(quickstop)
				}
				default {
					# Ignore unknown options
					#error "Unknown option $a"
				}
			}
		} else {
			lappend targets $a
		}
	}

	use rulebase

	# Loaded in the global scope 
	if {[file exists build.spec]} {
		uplevel #0 source build.spec
	} else {
		user-error "No build.spec in the current directory"
	}

	# Now build the targets

	if {[llength $targets] == 0} {
		set targets all
	}
	build $targets
}

proc use {args} {
	foreach m $args {
		if {[dict exists $::tmake(modules) $m]} {
			continue
		}
		dict set ::tmake(modules) $m 1

		set source $::tmake(libdir)/${m}.tcl
		if {![file exists $source]} {
			dev-error "use: No such module: $m"
		}
		uplevel #0 [list source $source]
		#lappend ::automf(makefiledeps) $source
	}
}

# ==================================================================
# DEFAULT RULE BASE
# ==================================================================

if {[info exists env(MFLAGS)]} {
	# Running under make
	set argv [list {*}$env(MFLAGS) {*}$argv]
}

make $argv

if {$tmake(numtargets) || $tmake(showtime)} {
	puts "Built $tmake(numtargets) target(s) in [format %.2f $(([clock-millis] - $tmake(start)) / 1000.0)] seconds"
}
