#!/bin/sh
# Copyright (c) 2011 WorkWare Systems http://www.workware.net.au/
# All rights reserved
# vim:se syntax=tcl:
# \
dir=`dirname "$0"`; exec "`$dir/find-tclsh`" "$0" "$@"

# ==================================================================
# Initialiation
# ==================================================================

set tmake(version) 0.1
set tmake(debug) 0
#  d = dynamic dependency
#  b = reasons for building
#  n = reasons for not building
#  r = show rule for target being considered (combines with -db, -dn)
#  t = target rule creation/update
#  c = configuration checking
#  g = graph dependencies executed
#  p = show high level rules as they are parsed
set tmake(debugtypes) {d 0 n 0 r 0 b 0 t 0 c 0 g 0 p 0}
set tmake(verbose) 0
set tmake(norun) 0
set tmake(current) {}
set tmake(rules) {}
set tmake(targets) {}
set tmake(clean) {clean {} distclean {} uninstall {}}
set tmake(install) {}
set tmake(installbin) {}
set tmake(installdirs) {}
set tmake(numtargets) 0
set tmake(showtime) 0
set tmake(quickstop) 0
set tmake(showrules) 0
set tmake(exitcode) 0
set tmake(modules) {}

# Should this really be here?
set tmake(includepaths) .
set tmake(headerscan) {}

# ==================================================================
# Argument Processing
# ==================================================================

proc make {argv} {
	global tmake
	#puts "make $argv"
	#parray ::env

	# 'compat' is needed before we can do anything, so set a temporary libdir
	# in case this is the development version
	set tmake(dir) [file dirname $::argv0]
	set tmake(libdir) $tmake(dir)/lib

	use compat
	set tmake(start) [clock-millis]

	use getopt config

	# Parse the user options
	set targets {}
	foreach a $argv {
		if {[regexp {([^=]*)=(.*)} $a -> n v]} {
			if {$n eq "V"} {
				set tmake(verbose) $v
			} elseif {$n eq "D"} {
				set tmake(debug) $v
			} elseif {$n eq "P"} {
				set tmake(showrules) 1
			} elseif {$n eq "N"} {
				incr tmake(norun)
			} elseif {$n eq "T"} {
				incr tmake(showtime)
			} elseif {$n eq "Q"} {
				incr tmake(quickstop)
			} else {
				define $n $v
			}
		} elseif {[string match -* $a]} {
			if {$a eq "-d*"} {
				foreach i [dict keys $tmake(debugtypes)] {
					dict set tmake(debugtypes) $i 1
				}
				continue
			}
			switch -glob -- $a {
				-d* {
					foreach i [split [string range $a 2 end] {}] {
						dict-incr tmake(debugtypes) $i 1
					}
					set tmake(debug) 1
				}
				--debug {
					# Equivalent to -dg
					set tmake(debug) 1
					dict-incr tmake(debugtypes) g 1
				}
				--verbose - -v {
					set tmake(verbose) 1
				}
				--version {
					use help
					puts [show-version]
					exit 0
				}
				--help - -h {
					use help
					show-help $argv
					exit 0
				}
				--dry-run - --just-print - -n {
					set tmake(norun) 1
				}
				--tim* - -t {
					incr tmake(showtime)
				}
				-q - --quickstop {
					incr tmake(quickstop)
				}
				-p - --print* {
					incr tmake(showrules)
				}
				-C* {
					# XXX: Should be "-C dir" but that is waiting for getopt
					cd [string range $a 2 end]
				}
				--* {
					user-error "Unknown option $a"
				}
				default {
					# Ignore unknown options
					#error "Unknown option $a"
				}
			}
		} else {
			lappend targets $a
		}
	}

	#parray tmake

	use rulebase

	# Loaded in the global scope 
	if {[file exists build.spec]} {
		uplevel #0 source build.spec
	} else {
		user-error "No build.spec in the current directory"
	}

	# Now build the targets

	if {[llength $targets] == 0} {
		set targets all
	}

	if {$tmake(showrules)} {
		show-all-rules
	}

	foreach t $targets {
		if {[build $t] < 0} {
			if {$tmake(exitcode) == 0} {
				build-error "Error: Don't know how to build $t"
			}
			break
		}
	}
}

# ==================================================================
# Module Loading
# ==================================================================

proc use {args} {
	foreach m $args {
		if {[dict exists $::tmake(modules) $m]} {
			continue
		}
		dict set ::tmake(modules) $m 1

		set source $::tmake(libdir)/${m}.tcl
		if {![file exists $source]} {
			dev-error "use: No such module: $m"
		}
		uplevel #0 [list source $source]
		#lappend ::automf(makefiledeps) $source
	}
}

# ==================================================================
# Debug, Errors and Messages
# ==================================================================

# @user-error msg
#
# Indicate incorrect usage to the user
# exits with a non-zero return code.
#
proc user-error {msg} {
	puts stderr "Error: $msg"
	puts stderr "Try: 'tmake --help' for options"
	exit 1
}

# @build-error msg
#
# Indicate that something failed to build and set exitcode=1
proc build-error {msg} {
	puts stderr $msg
	set ::tmake(exitcode) 1
}
# @user-notice msg
#
# Output the given message to stderr.
#
proc user-notice {msg} {
	puts stderr $msg
}

# Incorrect usage in the build.spec file. Identify the location.
proc dev-error {msg} {
	puts stderr [error-location $msg]
	exit 1
}

# Output a message to stdout if --verbose is set.
#
proc vputs {msg} {
	if {$::tmake(verbose)} {
		puts $msg
	}
}

# Returns 1 if any of the debug types is set
proc debug-is-set {types} {
	foreach t $types {
		if {[dict get $::tmake(debugtypes) $t]} {
			return 1
		}
	}
	return 0
}

# Output a message to stdout if --debug is set.
#
proc dputs {types msg} {
	if {[debug-is-set $types]} {
		puts "[dbg-msg-indent]\[$types\] $msg"
	}
}

proc dbg-msg-indent {} {
	string repeat "  " [llength $::tmake(current)]
}

# Pretty-print the commands for a rule
#
proc show-rule-commands {do} {
	set lines [split $do \n]
	set first [lindex $lines 0]
	if {$first eq ""} {
		set lines [lrange $lines 1 end]
		set first [lindex $lines 0]
	}
	regexp {^(\s*)} $first -> space
	set trim [string length $space]
	set prefix \t
	foreach j $lines {
		set r [string trimright [string range $j $trim end]]
		if {$r ne ""} {
			puts $prefix$r
		}
	}
}

# Output a rule in a user-friendly format
#
proc show-rule {target} {
	if {[is-target? $target]} {
		array set t [get-target-rule $target]
		set flags {}
		set lines {}
		foreach n [lsort [array names t]] {
			set v $t($n)
			switch -- $n {
				do - depends - inputs - building - msg - target {}
				source {
					if {$v ne "unknown"} {
						puts @[join $v {, }]
					}
				}
				phony {
					if {$v} {
						lappend flags $n
					}
				}
				result {
					if {$v < 0} {
						lappend flags failed
					} elseif {$v > 0} {
						lappend flags built
					}
				}
				vars {
					foreach {vn vv} $v {
						lappend lines "  var $vn=$vv"
					}
				}
				default {
					if {$v ne ""} {
						lappend lines "$n=$v"
					}
				}
			}
		}
		if {[llength $flags]} {
			append target " \[$flags\]"
		}
		puts "$target: $t(depends)"
		if {[llength $lines]} {
			puts [join $lines \n]
		}
		show-rule-commands $t(do)
	} else {
		puts "No rule to make $target"
	}
}

proc show-all-rules {} {
	foreach i [lsort [dict keys $::tmake(rules)]] {
		puts "-------------------------------------------"
		show-rule $i
		puts ""
	}
}

# ==================================================================
# Variable Handling
# ==================================================================

# Set a variable to the given value
# 
# e.g. define CC arm-linux-gcc -mbig-endian
#
proc define {name args} {
	upvar #0 $name n
	set n [join $args]
}

# Set a variable to the given value
# unless it is already set to a non-empty value.
#
proc define? {name args} {
	upvar #0 $name n
	if {![info exists n] || $n eq ""} {
		set n [join $args]
	}
}

# If the variable is not set, set it.
# Otherwise append the new value to the old value
# separated by a space.
#
proc define-append {name args} {
	upvar #0 $name n
	append-with-space ::$name [join $args]
}

# If the given var is not set or is "", sets it to $value
# Otherise appends $value with a space separator (or $space)
#
proc append-with-space {varname value {space " "}} {
	upvar $varname n
	if {[info exists n] && $n ne ""} {
		append n $space $value
	} else {
		set n $value
	}
}

# Takes a list and returns a new list with $suf appended
# to each element
# 
# suffix .c a b c => a.c b.c c.c
#
proc suffix {suf args} {
	set result {}
	foreach p [join $args] {
		lappend result $p$suf
	}
	return $result
}

# Takes a list and returns a new list with $pre prepended
# to each element
# 
# suffix jim- a.c b.c => jim-a.c jim-b.c
#
proc prefix {pre args} {
	set result {}
	foreach p [join $args] {
		lappend result $pre$p
	}
	return $result
}

# Takes a list of filenames and returns a new list with
# the extension of each filename changed to $ext
# 
# change-ext .c a.o b.o c => a.c b.c c.c
#
proc change-ext {ext args} {
	set result {}
	foreach p [join $args] {
		lappend result [file rootname $p]$ext
	}
	return $result
}

# Merges target variables.
# These are stored in dictionaries, where $dict1 is the current vars
# and the new vars $dict2 need to be merged.
# Where there is no overlap, the dictionaries are simply merged.
# Where a var exists in both, the values are combined with a space separator.
proc merge-vars {dict1 dict2} {
	if {[dict size $dict2]} {
		if {[dict size $dict1] == 0} {
			return $dict2
		}
		array set d1 $dict1
		foreach {n v} $dict2 {
			append-with-space d1($n) $v
		}
		return [array get d1]
	}
	return $dict1
}

# Appends the given arguments to the given key in the dictionary
proc dict-lappend {dictname key args} {
	upvar $dictname d
	set list [dict get $d $key]
	lappend list {*}$args
	dict set d $key $list
}

# Increments a value in the dictionary
proc dict-incr {dictname key {incr 1}} {
	upvar $dictname d
	set value [dict get $d $key]
	incr value $incr
	dict set d $key $value
}

# ==================================================================
# File Utilities
# ==================================================================

# @readfile filename ?default=""?
#
# Return the contents of the file, without the trailing newline.
# If the doesn't exist or can't be read, returns $default.
#
proc readfile {filename {default_value ""}} {
	set result $default_value
	catch {
		set f [open $filename]
		set result [read -nonewline $f]
		close $f
	}
	return $result
}

# @writefile filename value
#
# Creates the given file containing $value.
# Does not add an extra newline.
#
proc writefile {filename value} {
	set f [open $filename w]
	puts -nonewline $f $value
	close $f
}

# ==================================================================
# Rule Handling
# ==================================================================

# Returns 1 if the target is a rule target or an individual target
proc is-target? {target} {
	if {[dict exists $::tmake(rules) $target]} {
		return 1
	}
	dict exists $::tmake(targets) $target
}

# Returns the rule for a rule target or individual target
proc get-target-rule {target} {
	if {[dict exists $::tmake(targets) $target]} {
		set target [dict get $::tmake(targets) $target]
	}
	dict get $::tmake(rules) $target
}

proc set-target-rule {target dict} {
	dict set ::tmake(rules) $target $dict
	foreach t $target {
		dict set ::tmake(targets) $t $target
	}
}

proc show-this-rule {} {
	if {[debug-is-set p]} {
		puts "\[p\] [make-source-location [find-source-location]] [info level -1]"
	}
}

proc get-clean {type} {
	dict get $::tmake(clean) $type
}

proc add-clean {type args} {
	dict-lappend ::tmake(clean) $type {*}$args
}

# Adds a file to be installed
proc add-install-file {dest src {bin 0}} {
	# Add the directory to the list of directories to be created
	dict set ::tmake(installdirs) [file dirname $dest] 1
	if {[dict exists $::tmake(install) $dest]} {
		user-notice "Warning: Duplicate install rule for $dest"
	}
	dict set ::tmake(install) $dest $src
	dict set ::tmake(installbin) $dest $bin
	# This file also needs to be uninstalled
	add-clean uninstall $dest
}

# Returns the list of directories where files will be installed
#
proc get-installdirs {} {
	prefix $::DESTDIR [lsort [dict keys $::tmake(installdirs)]]
}

proc make-source-location {list {prefix {}} {suffix {}}} {
	if {$list eq "unknown"} {
		return ""
	}
	return $prefix[join $list ", "]$suffix
}

# This is the only way to create a rule
#
# Parses the arguments and adds them to the rule base
#
proc target {target args} {
	array set info [parse-target-rule $target $args]

	#show-this-rule

	set replace $info(replace)
	unset info(replace)

	# And -inputs are also -depends
	set info(depends) [concat $info(depends) $info(inputs)]

	if {[is-target? $target]} {
		array set orig [get-target-rule $target]
	}
	if {$replace} {
		if {[info exists orig]} {
			dputs t "Replacing existing rule for $target @$orig(source)"
			unset orig
		} else {
			dputs t "Rule for $target with -replace but not existing target @$info(source)"
		}
	}
	if {[info exists orig]} {
		# There is already a rule for this target, so attempt
		# to merge the two rules

		if {$info(do) ne "" && $orig(do) ne ""} {
			dev-error "$target already has '-do' @$orig(source)"
		}
		if {$info(dyndep) ne "" && $orig(dyndep) ne ""} {
			dev-error "$target already has '-dyndep' @$orig(source)"
		}
		lappend info(depends) {*}$orig(depends)
		lappend info(inputs) {*}$orig(inputs)
		lappend info(clean) {*}$orig(clean)
		lappend info(dyndep) {*}$orig(dyndep)
		incr info(phony) $orig(phony)
		append-with-space info(onfail) $orig(onfail) \n
		append-with-space orig(do) $info(add-do) \n

		if {$info(source) eq "unknown"} {
			set info(source) $orig(source)
		} elseif {$orig(source) ne "unknown"} {
			lappend info(source) {*}$orig(source)
		}

		# Need to append to any vars which exist
		set info(vars) [merge-vars $orig(vars) $info(vars)]

		# Whichever rule has '-do' also specifies '-inputs' and '-msg'
		if {$info(do) eq ""} {
			set info(do) $orig(do)
			set info(inputs) $orig(inputs)
			set info(msg) $orig(msg)
		}
	}

	# Now create/update the rule
	set-target-rule $target [array get info]
}

# Returns a dictionary (list) representing the parsed target rule
#
proc parse-target-rule {target arglist} {
	set info(source) [find-source-location]
	set info(result) 0
	set info(building) 0
	set info(target) $target
	set info(phony) 0
	set info(add-do) {}

	set -inputs {}
	set -depends {}
	set -clean {}
	set -do {}
	set -onfail {}
	set -msg {}
	set -vars {}
	set -dyndep {}

	set skip 0
	set add 0
	set replace 0

	foreach a $arglist {
		if {$a eq "-phony"} {
			incr info(phony)
			continue
		}
		if {$a eq "-add"} {
			incr add
			continue
		}
		if {$a eq "-replace"} {
			incr replace
			continue
		}
		if {$skip == 0 && [string match -* $a]} {
			if {![info exists $a]} {
				error "Unknown option to target: $a"
			}
			set current $a
			if {$a eq "-vars"} {
				incr skip 2
			}
		} else {
			if {$skip} {
				incr skip -1
			}
			lappend $current $a
		}
	}

	if {[llength ${-vars}] % 2} {
		dev-error "Rule for $target has an odd number of parameters to '-vars'"
	}
	if {[llength ${-do}] > 1} {
		dev-error "Rule for $target has more than one '-do' parameter"
	}
	if {[llength ${-msg}] > 1} {
		dev-error "Rule for $target has more than one '-msg' parameter"
	}
	if {[llength ${-dyndep}] > 1} {
		dev-error "Rule for $target has more than one '-dyndep' parameter"
	}
	if {$add && $replace} {
		dev-error "Rule for $target has both '-add' and '-replace'"
	}
	if {$add} {
		if {![llength ${-do}]} {
			dev-error "Rule for $target has '-add' but no '-do'"
		}
		# Transfer -do to add-do
		set info(add-do) [lindex ${-do} 0]
		set -do ""
	}

	set info(inputs) [join ${-inputs}]
	set info(depends) [join ${-depends}]
	set info(clean) ${-clean}
	set info(onfail) [lindex ${-onfail} 0]
	set info(vars) ${-vars}
	set info(do) [lindex ${-do} 0]
	set info(msg) [lindex ${-msg} 0]
	set info(dyndep) [lindex ${-dyndep} 0]
	set info(replace) $replace

	if {$info(do) eq "" && [llength $info(inputs)]} {
		dev-error "Rule for $target has '-inputs' but no '-do'"
	}
	if {$info(do) eq "" && $info(msg) ne ""} {
		dev-error "Rule for $target has '-msg' but no '-do'"
	}
	array get info
}

# ==================================================================
# Dependency Engine
# ==================================================================

proc needbuild? {target source} {
	set result [get-target-result $target]
	if {$result} {
		return $result
	}
	if {[file exists $target]} {
		if {[file exists $source]} {
			if {[file mtime $target] >= [file mtime $source]} {
				dputs n "$target is newer than $source, so not forcing rebuild"
				return 0
			}
		}
		dputs b "$target is older than $source, so forcing rebuild"
		return 1
	} else {
		dputs b "$target does not exist, so forcing build"
		return 1
	}
}

# Sets target-local variables. e.g. $inputs, $depends and $target
proc set-target-vars {info} {
	foreach {n v} [dict get $info vars] {
		set ::$n $v
	}
	foreach n {target depends inputs} {
		set ::$n [dict get $info $n]
	}
}
proc clear-target-vars {vars} {
	foreach n [dict keys $vars] {
		set ::$n ""
	}
}

proc get-target-result {target} {
	if {![is-target? $target]} {
		return -1
	}
	array set t [get-target-rule $target]
	return $t(result)
}

proc set-target-result {target result} {
	if {[get-target-result $target] == 0} {
		dict set ::tmake(rules) $target result $result
	}
}

proc note {args} {
	if {$::tmake(verbose) == 0} {
		puts [join $args]
	}
}

proc run {args} {
	set cmdline [join $args]
	vputs [string trim $cmdline]
	set rc [catch {
		exec >@stdout {*}$cmdline
	} msg opts]
	if {$rc == 1} {
		# On error, display the command and the error and return break
		build-error \n\t$cmdline\n$msg\n
		return -code break
	}
	# XXX: What to do on signal?
}

proc build {target} {
	global tmake
	set current $tmake(current)
	lappend current $target
	if {![is-target? $target]} {
		if {[file exists $target]} {
			dputs n "$target is not a target, but exists"
			return 0
		}
		dputs b "$target is not a target and does not exist"
		return -1
	}
	array set t [get-target-rule $target]
	if {$t(result) < 0} {
		#dputs "$target has previously failed to build"
		return -1
	} elseif {$t(result) > 0} {
		#dputs "$target has previously been built"
		return 1
	}
	if {$t(building)} {
		puts stderr "Recursive definition for [join [lreverse $current] { <= }] [make-source-location $t(source) @]"
		exit 1
	}
	dict set tmake(rules) $target building 1

	set reason {}
	if {$t(phony)} {
		dputs b "$target is phony, so rebuilding"
		lappend reason phony
		set result 1
	} elseif {![file exists $target]} {
		dputs b "$target doesn't exist, so rebuilding"
		lappend reason noexist
		set result 1
	} else {
		#dputs b "$target exists, so checking dependencies"
		set result 0
	}

	set oldcurrent $tmake(current)
	set tmake(current) $current

	# First check dynamic dependencies
	set depends $t(depends)
	set dyndeps {}
	if {$t(dyndep) ne ""} {
		foreach i $t(depends) {
			lappend dyndeps {*}[uplevel #0 $t(dyndep) $i]
		}
		dputs d "Dynamic dependencies for $target: $dyndeps"

		# Add anything which is a known target to the real dependencies
		foreach i $dyndeps {
			if {[is-target? $i]} {
				lappend depends $i
			}
		}
	}

	# Make sure dependencies are up to date
	foreach i $depends {
		#puts "Building $i"
		#dumptarget $i
		set rc [build $i]
		if {$rc < 0} {
			if {[get-target-result $target] >= 0 && $tmake(exitcode) == 0} {
				build-error "Error: Don't know how to build $i: [join [lreverse $current] { <= }] [make-source-location $t(source) @]"
			}
			#dumptarget $target
			#show-reason $current
			set result -1
			if {$tmake(quickstop)} {
				break
			}
		} elseif {$result == 0} {
			if {$rc > 0} {
				dputs b "Rebuilding $target because $i was built"
				lappend reason depend $i
				set result 1
			} elseif {[needbuild? $target $i]} {
				lappend reason older $i
				set result 1
			} elseif {$rc == 0} {
				foreach d $dyndeps {
					# Only care about non-target dynamic dependencies if they exist
					# XXX: Do we need to look in IncludePaths for this file?
					if {[file exists $d]} {
						#puts "Is target or exists: $d"
						# Do we need build here, or just needbuild?
						if {[needbuild? $target $d]} {
							lappend reason older $d
							set result 1
							break
						}
					} else {
						#puts "Ignoring dyndep: $d"
					}
				}
			}
			#puts "Got dyndep for $target, rc=$rc, result=$result"
		}
	}

	if {$tmake(quickstop) && $tmake(exitcode)} {
		exit $tmake(exitcode)
	}

	if {$result > 0} {
		if {[debug-is-set g]} {
			puts "\[g\] [join $current { --> }] ($reason)"
		}
	}

	if {$result > 0 && $t(do) ne ""} {
		#puts "Running rules for $target"
		dputs b "Building [join [lreverse $current] { <= }] [make-source-location $t(source) "with rule @"]"
		set rc [catch {
			set-target-vars [array get t]
			uplevel #0 $t(msg)
			if {[dict get $tmake(debugtypes) r]} {
				show-rule $target
			}
			if {$tmake(norun)} {
				if {[catch {uplevel #0 [list subst $t(do)]} do]} {
					# The rule probably refers to a command or variable which
					# doesn't exist, so show it without the subst
					set do $t(do)
				}
				show-rule-commands $do
			} else {
				uplevel #0 $t(do)
			}
		} msg opts]

		if {[check-signal]} {
			puts ""
			set tmake(exitcode) 2
			set rc 5
		}

		# Always delete $t(clean) files after the rule has run
		if {[llength $t(clean)]} {
			file delete {*}$t(clean)
		}

		# Did the rule make the targets?
		if {$rc == 0 && !$t(phony) && !$tmake(norun)} {
			foreach f $target {
				if {![file exists $f]} {
					# XXX: Should onfail run here if --quickstop is set?
					build-error "[make-source-location $t(source) "" ": "]Error: Rule for $target failed to build target(s)"
					# Use break to indicate that we have already output the message
					set rc 3
				}
			}
		}

		if {$rc == 0} {
			incr tmake(numtargets)
		} else {
			# On failure, delete the target(s)
			file delete {*}$target

			# Try to run onfail
			if {[catch {
				dputs b $t(onfail)
				uplevel #0 $t(onfail)
				if {$rc == 1} {
					build-error [errorInfo $msg]
				}
			} fmsg fopts]} {
				build-error [errorInfo $fmsg]
			}
			set result -1
		}

		if {$rc == 5 || ($tmake(quickstop) && $tmake(exitcode))} {
			exit $tmake(exitcode)
		}

		clear-target-vars $t(vars)
	}

	# For each target, mark it as made (> 0) or unmakeable(< 0)
	if {$result != 0} {
		#puts "Marking target result=$result for $current"
		foreach c $current {
			set-target-result $c $result
		}
	}
	set tmake(current) $oldcurrent
	dict set tmake(rules) $target building 0
	return $result
}

# ==================================================================
# Dynamic dependencies
# ==================================================================

# Note: stops scanning after 200 lines with no #include
proc header-scan-regexp {regex filename} {
	# memoize the result
	if {[dict exists $::tmake(headerscan) $filename,$regex]} {
		return [dict get $::tmake(headerscan) $filename,$regex]
	}
	set headers {}
	set f [open $filename]
	set n 0
	while {[gets $f buf] >= 0} {
		if {[regexp $regex $buf -> name]} {
			lappend headers $name
			set n 0
		} elseif {[incr n] > 200} {
			break
		}
	}
	close $f
	dict set ::tmake(headerscan) $filename,$regex $headers
	return $headers
}

proc find-file {filename paths} {
	foreach p $paths {
		if {$p eq "" || $p eq "."} {
			set f $filename
		} else {
			set f [file join $p $filename]
		}
		if {[is-target? $f] || [file exists $f]} {
			return $f
		}
	}
	return ""
}

# XXX: This could be done better
proc header-scan-regexp-recursive {regex filename} {
	if {![file exists $filename]} {
		return {}
	}
	array set deps {}
	set scanned($filename) 1
	set toscan [header-scan-regexp $regex $filename]
	while {[llength $toscan]} {
		set newscan {}
		foreach d $toscan {
			if {![info exists scanned($d)]} {
				set df [find-file $d $::tmake(includepaths)]
				if {$df ne ""} {
					set d $df
					if {[file exists $df]} {
						lappend newscan {*}[header-scan-regexp $regex $d]
					}
				}
				set scanned($d) 1
			}
			set deps($d) 1
		}
		set toscan $newscan
	}
	array names deps
}

# ==================================================================
# ENTRY POINT
# ==================================================================

if {[info exists env(MAKEFLAGS)]} {
	# Running under make
	set argv [list {*}-$env(MAKEFLAGS) {*}$argv]
}

make $argv

if {$tmake(numtargets) || $tmake(showtime)} {
	set elapsed [expr {([clock-millis] - $tmake(start)) / 1000.0}]
	puts "Built $tmake(numtargets) target(s) in [format %.2f $elapsed] seconds"
}

exit $tmake(exitcode)
