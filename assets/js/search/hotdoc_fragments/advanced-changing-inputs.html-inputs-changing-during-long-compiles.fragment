fragment_downloaded_cb({"url":"advanced-changing-inputs.html#inputs-changing-during-long-compiles","fragment":"Inputs changing during long compiles\nEarly versions of tmake using time-based comparison only created a virtual\ntimestamp for a target after the target was built. This suffered from a number of problems:\nIt assumed that [file mtime] can be compared directly against [clock seconds]\nIf source files changed between when the 'do' started, and when it finished,\nthis information was lost.\nThis situation is complicated with high resolution timestamps as some tools write\nfiles with 1-second resolution timestamps and thus built targets can have\ntimestamps before the inputs.\nNote that hash-based builds don't suffer from this problem as the hash is always\ncompared against the previously stored hash. No ordering is required.\nTherefore the solution was to use the same approach for time-based builds and\nconsider the mtime as a proxy hash of the source file. If the hash/mtime for any dependency\nchanges from the previous build, the target is out of date and needs to be rebuilt.\nThis simplifies the logic as the same algorithm is used in both time-based and\nhash-based builds, simply with a different \"hash\" calculation.\n\n\nIt assumed that [file mtime] can be compared directly against [clock seconds]\n\n\nIf source files changed between when the 'do' started, and when it finished,\nthis information was lost.\n\n\nThis situation is complicated with high resolution timestamps as some tools write\nfiles with 1-second resolution timestamps and thus built targets can have\ntimestamps before the inputs.\n\n\n"});