fragment_downloaded_cb({"url":"dyndep.html#dynamic-dependency-checking","fragment":"Dynamic Dependency Checking\nDynamic dependency checking is supported which allows a commmand (e.g. a file scanner)\nto automatically determine dependencies.\nConsider the following file, a.c\nAnd a.h\nThe built-in rulebase automatically associates the built-in recursive regex scanner with\nrules to build object files (.o) from source files (.c) via a rule that looks like:\nNote that the 'dyndep' attribute specifies a command prefix to run that will\nreturn a list of dependent targets/files.\nThe built-in scanner:\nDynamic dependencies:\nNote that only inputs are passed to the dynamic dependency scanner, not all dependencies.\nFor example, if a rule uses a generator, we typically don't want to scan the generator\nfor dynamic dependencies, only the input files. If the generator has it's own dynamic\ndependencies, they should be included in the rule to build that generator. (If it is a script\ngenerator, PublishBin --copy can be used to add dynamic dependencies).\nXXX: Note that \"#include INCLUDEFILENAME\" is not supported. Suggest workarounds.\n\nUses a regular expression to scan for dependencies of the form #include <abc.h> or #include \"abc.h\"\nIgnores conditional compilation (#ifdef, etc.)\n\nAnd thus is conservative in that it can make create an unnecessary dependency (but not the reverse)\n\n\nIs recursive, so that in the example above, a.o depends upon both a.h and b.h\nKnows if a dependency is:\n\na target, and thus must be generated before being scanned recursively\nan existing source file, and thus creates a time or hash-based dependeny\nmissing, and thus assumed to be a system header, and ignored\n\n\nCaches the results of the scan to avoid unnecessary scanning\nCarefully checks to see that the scan would return the same results as\nthe cache to ensure that changes such as creating files in-tree which\nshadow system headers cause a rebuild\n\n\nAnd thus is conservative in that it can make create an unnecessary dependency (but not the reverse)\n\n\na target, and thus must be generated before being scanned recursively\nan existing source file, and thus creates a time or hash-based dependeny\nmissing, and thus assumed to be a system header, and ignored\n\n\nAre cached, along with the command (paths, pattern, ...), so that the (small) cost of scanning is\nonly incurred when the file changes\nThe set of dependencies is cached. If this set changes, the target is rebuilt.\nThis can occur if a system header was previously shadowed by a source file, but\nthe build changes so that this no longer occurs, or if a new header file is added\nin a directory earlier in the set of include paths.\n\n"});