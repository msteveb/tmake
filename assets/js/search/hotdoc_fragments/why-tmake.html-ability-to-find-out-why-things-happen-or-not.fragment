fragment_downloaded_cb({"url":"why-tmake.html#ability-to-find-out-why-things-happen-or-not","fragment":"Ability to find out why things happen, or not\nWhen things go wrong...\nwaf seems to have good debugging facilities\ntmake -dg traces the build reasoning, including the dependency chain\nwhich led to the target being rebuilt.\nIt is also possible to display the rules associated with targets\nwhich are built, including the original source location(s) where\nthose rules were defined.\nWhen a build description logic error occurs (as opposed to a compiler error),\nthe location of the problem is identified, along with the chain of dependencies\nwhich caused the problem. In the example below, line 4 of sub/build.spec indicates\nthat it can't find sub/y.c which is needed to build sub/libx.a, required by main/a.\nSometimes something can't be built and it isn't clear why not.\nOne approach is to print the entire dependency tree (tmake -p), but this can be\nawkward for a large project. Often a better alternative is to search for a specific rule.\nCan't build x.o? Why not?\nAhh, because x.o is 'sub/x.o'\nThe most commonly used debug flags are tmake -db to see why targets were built,\ntmake -dn to see why targets were not built, and tmake -dd to examine\ndynamic dependencies.  See Debug Flags\n"});