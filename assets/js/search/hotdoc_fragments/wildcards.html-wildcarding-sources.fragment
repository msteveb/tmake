fragment_downloaded_cb({"url":"wildcards.html#wildcarding-sources","fragment":"Wildcarding sources\ntmake attempts to allow both the simplest build description necessary while\nalso being as correct and safe as possible. Consider a simple build description.\nFor many projects (or directories within a project) this is a perfectly reasonable\nand correct build description. However many other modern build systems do not support\nthis. Consider the explanation from meson - No wildcards for meson\nMeson does not support this syntax and the reason for this is simple.\nThis can not be made both reliable and fast. By reliable we mean\nthat if the user adds a new source file to the subdirectory, Meson\nshould detect that and make it part of the build automatically.\nOne of the main requirements of Meson is that it must be fast. This\nmeans that a no-op build in a tree of 10 000 source files must take\nno more than a fraction of a second. This is only possible because\nMeson knows the exact list of files to check. If any target is\nspecified as a wildcard glob, this is no longer possible. Meson\nwould need to re-evaluate the glob every time and compare the list\nof files produced against the previous list. This means inspecting\nthe entire source tree (because the glob pattern could be\nsrc/\\*/\\*/\\*/\\*.cpp or something like that). This is impossible to\ndo efficiently.\nThe main backend of Meson is Ninja, which does not support wildcard\nmatches either, and for the same reasons.\nBecause of this, all source files must be specified explicitly.\nHowever tmake does not force this either-or choice on you. Instead you can certainly\nlist out all source files explicitly if desired (and this can improve build speed),\nhowever wildcards are also supported and they will be expanded during the parse phase\nwith the results available in the build phase. This can be a very useful choice for\nsmall to medium size projects\nNow adding a new file is simple.\nAnd removing a file is also simple.\ntmake notices that add.c no longer exists, and thereforce add.o is no longer a target.\nIt automatically removes the previous add.o to avoid an inconsistent build.\nMore sophisticated wildcards may be used with the Glob command.\nAs a test of wildcarding performance, my Linux VM\ngen_src.py.txt -> 1000 files\nWith wildcarding:\nWith explicit files: full build: 14.81s, do nothing build: 0.27s\nWith wildcarding:    full build: 12.72s, do nothing build: 0.27s\nmeson/ninja: full build: 6s, do nothing build: 0.01s\nOn my build systems, it takes around 1-2ms to glob 1000 files (with a hot cache)\n"});