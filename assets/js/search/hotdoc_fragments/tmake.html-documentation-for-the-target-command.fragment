fragment_downloaded_cb({"url":"tmake.html#documentation-for-the-target-command","fragment":"Documentation for the 'target' command\nAll build rules are constructed using the 'target' command:\ne.g.\nArguments to 'target' take the form '-key1 values... -key2 ...', where all subsequent\nvalues are considered to belong to a key until the next key. This approach make\nit very easy to compose rules by simply appending keys and values.\nNote that many keys are simple flags and do not expect any values.\nCreate an alias for the target, e.g. name.\nSee the section on Aliases for more information.\nList of files/targets upon which this target depends.\nThese targets are available to the -do command as $depends\nNote that -inputs are automatically added to -depends.\nList of files/targets which are used by the -do command to create the target.\nThese targets are available to the -do command as $inputs.\nTcl script to run when the target needs to be built.\nUnless the target is phony, the -do command must create the given target(s).\nThe standard variables are set for the rule ($inputs, $target, etc.)\nSee 'Variables available to commands'\nIf 'UseHashes on' is set, tmake will only compute hashes for source files but\nnot targets. If this is set on a rule, any checks for the target being out\nof date will be made using a hash rather than a timestamp (regardless of the setting\nof 'UseHashes').\nThis is useful if the build command updates the file with unchanged contents.\nShould be set if the target is a symlink, so that the existence and timestamp\nof the target is used rather than what the target points to.\nMarks the target as phony. A phony target is considered to always need building\nand any file with the same name is ignored. Typical phony targets are: all, clean, test, install\nFailure of the '-do' commands for the rule is ignored.\nNormally, the '-do' commands for a rule will refuse to run if being run as root.\nThis option disables the check for this rule. See the section below on installation\nas root for the rationale for this option.\nTcl script to run if the command fails. Allows for cleanup, e.g. of\ntemporary files.\nTcl script to run when the rule is invoked to build the target.\nShould be succinct to avoid excess output in the normal case.\nFor example, the default object rule for .c files uses -msg {note Cc $target}\nTcl command prefix invoked to extract dynamic dependencies from each of the dependencies.\nReturns a list of dependencies. See header-scan-regexp-recursive and ObjectRule.c\nin rulebase.default for an example.\nBinds the names to the values for the rule.\nBefore invoking Tcl commands associated with -do, -msg, -onerror and -dyndep, variables (defines) are\ncreated/set according to any bound variables. For example, in the following rule, $C_FLAGS\nand $INCPATHS are set to the given values before the -dyndep and -do scripts are run.\nCompare this with $CCACHE, $CC and $CFLAGS which are global variables (defines),\nand thus are the same for all rules.\nNote that if a name is specified with -var multiple times (possibly in multiple rules), the values accumulate\n(with a space separator). Consider the rule created by:\nLet's add an include path to this rule:\nNow the new rule is:\nSimilar to -vars, except that the value of the variable is taken from current value\nof the global variable (define)\nNormally all commands are run from the top level source directory.\nIf -chdir is given, commands for this target are run from the local build directory\n(objdir) instead. i.e. for a -chdir rule in directory 'abc', the rule is run from objdir/abc.\nThis is most often used for unit tests or generators which make assumptions\nabout the current directory. It should be avoided where possible.\nDo not cache this rule. Note that the 'Install' command from rulebase.default\nuses -nocache for performance reasons since install targets are never used\nas dependencies.\nThe following options are experimental and may be removed in the future:\nNormally only one rule for a target may contain -do. With -add, -do commands\nmay be added to an existing rule.\nIf the target fails to build, exit immediately (like tmake -q) rather than building\nother, non-dependent targets.\n"});