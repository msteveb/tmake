fragment_downloaded_cb({"url":"tmake.html#about-tmake","fragment":"About tmake\ntmake is a proof-of-concept, advanced build system that is usable for small to medium\nsized projects (< ~10,000 source files) with the following features:\nEssentially almost everything listed here: http://www.conifersystems.com/whitepapers/gnu-make/\nis addressed.\n\nBuild descriptions are succinct and declarative\nA real language for build descriptions (Tcl) and build actions, with simple conditional syntax\nRules can create multiple files\nMulti-stage reparsing allows build configurations to be generated and reloaded\n(e.g. via configure or kconfig)\nBuild system metadata cache allows for:\n\nRebuilding if build commands change\nRebuilding if the target is to be built by a different rule\nHash-based determination of changed sources\nRules that don't update the build target\nCleaning orphan targets\nCached dynamic dependencies\n\n\nEasily supports \"generators\" that generate sources, including header files\nDynamic dependency support, including caching dependencies and support for generated files\nExcellent debugging facilities to identify exactly what is occuring and why\n'tmake --find' to find specific rules\nBuilds are out-of-tree\nSupports (optional) wildcarding for specifying sources\nNon-recursive\nAutomatic creation of directories as required\nCommon operations (mkdir, rm) can be done without forking a process\nAdd additional dependencies, bound vars, etc. to existing rules\ntmake --genie for fast-start\nRequires jimsh, the Jim Tcl interpreter to run\n(but it is possible to include a single-file bootstrap implementation that\nauto-builds with a C compiler)\n\n\nRebuilding if build commands change\nRebuilding if the target is to be built by a different rule\nHash-based determination of changed sources\nRules that don't update the build target\nCleaning orphan targets\nCached dynamic dependencies\n\n"});