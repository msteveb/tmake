fragment_downloaded_cb({"url":"tmake.html#variables","fragment":"Variables\ndefine! - defines a var and marks it as \"fixed\", which means that only define! can overwrite it\ndefine  - defines a var, overwriting any existing definition\ndefine? - defines a var only if it wasn't previously defined or was \"\"\ndefine-exists - checks to see if a var is defined\nget-define    - gets the value of a defined variable\ndefine-append - defines a var if it doesn't exist or is \"\", or appends (with a space) if it does\nNote that only variables defined in the top level project.spec and\nbuild.spec, and the rulebase (rulebase.default or rulebase.spec)\nare propagated to subdirectories. Any variables defined in subdirectory\nbuild.spec files are only valid for the remainder of that build.spec\nfile.\nFor example, IncludePaths can be used in project.spec or the top level build.spec\nto set paths (via $INCPATHS) for all directories. However when IncludePaths is used\nin a subdirectory, it affects only that subdirectory.\nAlso see the -vars and -getvar rule options which allow a variable to be bound to a rule.\n"});