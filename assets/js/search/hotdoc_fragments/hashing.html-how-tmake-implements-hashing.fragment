fragment_downloaded_cb({"url":"hashing.html#how-tmake-implements-hashing","fragment":"How tmake implements hashing\nConsider the following rules (where ‚Üê means depends on):\nWhen deciding whether to build a target, tmake looks at the previous hashes and the current hashes of c and d.\nConsider the case where the target previously ran and the hash dependency hashes were\nrecorded in the cache.\nNow when deciding whether to build a target, tmake computes hashes of all it's dependencies.\nIf the result is the same answer as the saved dephashes(a), there is no need to build.\nIf it is different, tmake updates dephashes(a) in the cache and continues to build.\nIt is OK to update the cache and then have the build fail, because the build will rerun next time\n(for the same reason it ran this time).\nThere a few extra things to consider.\nIf the targets need to be built for some other reason (e.g. does not exist), the\nhash of dependents is not computed immediately. Rather the check is done after\nall the dependents are successfully created.\nRather than compute the hash every time, tmakes stores the mtime and hash of dependencies\nin the cache. If the mtime matches what is stored in the cache, the hash is used from the cache.\nOtherwise the hash is computed and the cache entry is updated.\nPublishIncludes uses \"Publish --hash\" to add -hash to the publish rules. Since the published\nheader files are targets, normally they would use time-based comparison rather than hash-based\ncomparison. But these published headers are really source (unless generated), so hash-based\ncomparison is used to prevent unecessary rebuilds.\nIt would be expensive to compute hashes of possibly large generated targets. Generated files\nare only be generated by the build system, so mtimes for these files will change when they are\ncreated/modified - thus tmake uses mtime as a proxy for the hash for targets. If the mtime changes\n(either forwards or backwards), the file is considered to have changed.\nIf it is desired to use hashing on certain targets, -hash can be set on the target rule\nto force a hash check rather than a time check.\nSwitching from hash-based to time-based and back to hash-based builds could cause problems with\nout-of-date hashes as these are not updated when running time-based builds.\nFor this reason, when switching to time-based, hashes are removed from the cache.\nHashes are computed by running 'md5sum' (or md5, for MacOS) because it is a fast hash\nwith a low chance of collisions. If the 'md5' module is available for jimsh, this is used instead.\n\n\nIf the targets need to be built for some other reason (e.g. does not exist), the\nhash of dependents is not computed immediately. Rather the check is done after\nall the dependents are successfully created.\n\n\nRather than compute the hash every time, tmakes stores the mtime and hash of dependencies\nin the cache. If the mtime matches what is stored in the cache, the hash is used from the cache.\nOtherwise the hash is computed and the cache entry is updated.\n\n\nPublishIncludes uses \"Publish --hash\" to add -hash to the publish rules. Since the published\nheader files are targets, normally they would use time-based comparison rather than hash-based\ncomparison. But these published headers are really source (unless generated), so hash-based\ncomparison is used to prevent unecessary rebuilds.\n\n\nIt would be expensive to compute hashes of possibly large generated targets. Generated files\nare only be generated by the build system, so mtimes for these files will change when they are\ncreated/modified - thus tmake uses mtime as a proxy for the hash for targets. If the mtime changes\n(either forwards or backwards), the file is considered to have changed.\nIf it is desired to use hashing on certain targets, -hash can be set on the target rule\nto force a hash check rather than a time check.\n\n\nSwitching from hash-based to time-based and back to hash-based builds could cause problems with\nout-of-date hashes as these are not updated when running time-based builds.\nFor this reason, when switching to time-based, hashes are removed from the cache.\n\n\n"});