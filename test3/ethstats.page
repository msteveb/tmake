label "Ethernet Statistics"
title "Ethernet Statistics"
summary "Report network statistics for ethernet devices"

accesslevel status

storage none

bar "Ethernet Statistics"

init {
	proc switchport {port} {
		return [root]/supervisory/switch/[+ $port 16]
	}
	proc switchreg {reg} {
		return [root]/supervisory/switch/$reg
	}
}

text {
	display {
		package require table

		# Statistics we are interested in displaying.
		set statsfields {
			InBadOctets
			InBroadcasts
			InFCSErr
			InFragments
			InGoodOctets
			InJabber
			InMulticasts
			InOversize
			InPause
			InRxErr
			InUndersize
			InUnicast
			OutBroadcasts
			OutMulticasts
			OutOctets
			OutPause
			OutUnicast
		}

		set portinfo {
			Link	link	{0 Down 1 Up}
			Speed	speed	{0 Unknown 10 10 100 100 1000 1000}
			Duplex	duplex	{0 Half 1 Full}
		}

		# Create a new table
		set tb [table class=anytable]

		$tb hdr
		$tb val "" class=attribute
		foreach heading {"Port 1" "Port 2" "Port 3" "Port 4" "Link"} {
			$tb val $heading class=rounded id=ethstats
		}

		foreach i {1 2 3 4 5} {
			set link($i) [readfile [switchport $i]/link 0]
		}

		# First the special fields, link, status and duplex
		foreach {name field enumlist} $portinfo {
			$tb dat class=[expr {[incr rownum] % 2 ? "row1" : "row2"}]
			$tb val $name class=label

			# Iterate over each port ..
			# Note: We *could* capture the counters for each port before displaying, but
			#       we don't really expect these counters to be synchronised (do we?)
			foreach i {1 2 3 4 5} {
				if {$link($i) == 0 && $field ne "link"} {
					set val -
				} else {
					set val [readfile [switchport $i]/$field 0]
					if {[catch {set val $enumlist($val)}]} {
						set val -
					}
				}
				$tb val $val
			}
		}

		# Now the stats fields
		foreach name $statsfields {
			$tb dat class=[expr {[incr rownum] % 2 ? "row1" : "row2"}]
			$tb val $name class=label

			foreach i {1 2 3 4 5} {
				$tb val [readfile [switchport $i]/$name "-"] class=num
			}
		}

		# Now write the table
		$tb write
	}
}

auto_refresh_page

button clear {
	label "Reset Statistics"
	stdmode {onclick=return confirm('Really reset statistics?')}
	submit {
		if {[cgi auth access $page rw]} {
			set ::argv0 web
			package require logging
			log_info "Ethernet statistics cleared by [cgi auth username]"
			writefile [switchreg stats/clear] 1
			cgi nextpage $page
		}
	}
}

# vim: se ts=4:
